@extends('layouts.app')

@section('page_title')
    @php
        $breadcrumbItems = [
            [
                'text' => 'Settings',
                'url' => route('settings.index'),
                'icon' => 'gear',
                'icon_category' => 'action'
            ],
            [
                'text' => 'Import Settings',
                'url' => route('settings.import'),
                'icon' => 'upload',
                'icon_category' => 'action'
            ],
            [
                'text' => 'Photo Timeline Import',
                'url' => route('settings.import.photo-timeline.index'),
                'icon' => 'camera',
                'icon_category' => 'action'
            ]
        ];
    @endphp
    
    <x-breadcrumb :items="$breadcrumbItems" />
@endsection

@section('content')
    <div class="container-fluid">
        <div class="row">
            <!-- Left Sidebar Menu -->
            <div class="col-md-3">
                <x-settings-nav active="import" />
            </div>

            <!-- Main Content Area -->
            <div class="col-md-9">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-camera me-2"></i>Photo Timeline Import
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <h6 class="alert-heading">
                                <i class="bi bi-info-circle me-2"></i>How Photo Timeline Import Works
                            </h6>
                            <p class="mb-0">
                                This tool imports travel events from your photo timeline data. You'll need to first process your Photos.app library using our standalone tool, then upload the generated JSON file here.
                            </p>
                        </div>

                        <!-- Step 1: Download Tool -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="bi bi-download me-2"></i>Step 1: Process Your Photos
                                </h6>
                            </div>
                            <div class="card-body">
                                <p>Download and run our standalone photo processor to extract travel data from your Photos.app library:</p>
                                <a href="{{ asset('photo-timeline-processor.html') }}" download class="btn btn-primary">
                                    <i class="bi bi-download me-2"></i>Download Photo Processor
                                </a>
                                <small class="text-muted d-block mt-2">
                                    Save the file to your computer, then open it in your web browser. Follow the instructions to export your photo data and generate a travel timeline.
                                </small>
                            </div>
                        </div>

                        <!-- Step 2: Upload Timeline -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="bi bi-upload me-2"></i>Step 2: Upload Travel Timeline
                                </h6>
                            </div>
                            <div class="card-body">
                                <form id="timelineImportForm" enctype="multipart/form-data">
                                    @csrf
                                    
                                    <div class="mb-3">
                                        <label for="timelineFile" class="form-label">Travel Timeline File (JSON)</label>
                                        <input type="file" class="form-control" id="timelineFile" name="timeline_file" 
                                               accept=".json" required>
                                        <div class="form-text">
                                            Upload the JSON file generated by the photo processor. Max 10MB.
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label for="importMode" class="form-label">Import Mode</label>
                                        <select class="form-select" id="importMode" name="import_mode" required>
                                            <option value="preview">Preview Only (No Import)</option>
                                            <option value="create">Create New Travel Spans</option>
                                            <option value="merge">Merge with Existing Data</option>
                                        </select>
                                        <div class="form-text">
                                            Choose how to handle the imported data.
                                        </div>
                                    </div>

                                    <div class="d-flex gap-2">
                                        <button type="button" id="previewBtn" class="btn btn-outline-primary">
                                            <i class="bi bi-eye me-2"></i>Preview Timeline
                                        </button>
                                        <button type="button" id="importBtn" class="btn btn-primary" disabled>
                                            <i class="bi bi-upload me-2"></i>Import Timeline
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>

                        <!-- Preview Results -->
                        <div id="previewResults" class="card mb-4" style="display: none;">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="bi bi-eye me-2"></i>Timeline Preview
                                </h6>
                            </div>
                            <div class="card-body">
                                <div id="previewContent"></div>
                            </div>
                        </div>

                        <!-- Import Results -->
                        <div id="importResults" class="card mb-4" style="display: none;">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="bi bi-check-circle me-2"></i>Import Results
                                </h6>
                            </div>
                            <div class="card-body">
                                <div id="importContent"></div>
                            </div>
                        </div>

                        <!-- Progress Bar -->
                        <div id="progressSection" class="progress-section" style="display: none;">
                            <div class="progress mb-3">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     role="progressbar" style="width: 0%"></div>
                            </div>
                            <div id="progressText" class="text-center">Processing...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Preview Modal -->
    <div class="modal fade" id="previewModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Timeline Preview</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="modalPreviewContent"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
@endsection

@push('scripts')
<script>
$(document).ready(function() {
    let currentFile = null;
    
    // File selection
    $('#timelineFile').on('change', function() {
        const file = this.files[0];
        if (file) {
            currentFile = file;
            $('#importBtn').prop('disabled', false);
            
            // Validate file type
            if (file.type !== 'application/json' && !file.name.endsWith('.json')) {
                alert('Please select a valid JSON file.');
                this.value = '';
                currentFile = null;
                $('#importBtn').prop('disabled', true);
            }
        }
    });
    
    // Preview button
    $('#previewBtn').on('click', function() {
        if (!currentFile) {
            alert('Please select a file first.');
            return;
        }
        
        previewTimeline();
    });
    
    // Import button
    $('#importBtn').on('click', function() {
        if (!currentFile) {
            alert('Please select a file first.');
            return;
        }
        
        importTimeline();
    });
    
    function previewTimeline() {
        const formData = new FormData();
        formData.append('timeline_file', currentFile);
        formData.append('import_mode', 'preview');
        formData.append('_token', $('input[name="_token"]').val());
        
        // Show progress indicator for large datasets
        $('#preview-progress').show();
        $('#progress-text').text('uploading file...');
        $('.progress-bar').css('width', '25%');
        
        showProgress('Previewing timeline...');
        
        // Simulate progress updates for better UX
        let progress = 25;
        const progressInterval = setInterval(() => {
            progress += Math.random() * 15;
            if (progress > 90) progress = 90;
            $('.progress-bar').css('width', progress + '%');
            
            if (progress < 50) {
                $('#progress-text').text('analyzing timeline data...');
            } else if (progress < 75) {
                $('#progress-text').text('checking residence overlaps...');
            } else {
                $('#progress-text').text('generating preview...');
            }
        }, 500);
        
        $.ajax({
            url: '{{ route("settings.import.photo-timeline.preview") }}',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                clearInterval(progressInterval);
                $('#preview-progress').hide();
                hideProgress();
                if (response.success) {
                    displayPreview(response.preview);
                } else {
                    showError('Preview failed: ' + response.message);
                }
            },
            error: function(xhr) {
                clearInterval(progressInterval);
                $('#preview-progress').hide();
                hideProgress();
                const response = xhr.responseJSON;
                const message = response?.message || 'Preview failed. Please try again.';
                showError(message);
            }
        });
    }
    
    function importTimeline() {
        // Get selected spans
        const selectedSpans = [];
        $('.span-checkbox:checked').each(function() {
            const spanIndex = parseInt($(this).data('span-index'));
            selectedSpans.push(spanIndex);
        });
        
        if (selectedSpans.length === 0) {
            alert('Please select at least one travel span to import.');
            return;
        }
        
        const importMode = $('#importMode').val();
        const formData = new FormData();
        formData.append('timeline_file', currentFile);
        formData.append('import_mode', importMode);
        formData.append('selected_spans', JSON.stringify(selectedSpans));
        formData.append('_token', $('input[name="_token"]').val());
        
        showProgress(`Importing ${selectedSpans.length} selected travel spans...`);
        
        $.ajax({
            url: '{{ route("settings.import.photo-timeline.import") }}',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                hideProgress();
                if (response.success) {
                    displayImportResults(response.import_result);
                } else {
                    showError('Import failed: ' + response.message);
                }
            },
            error: function(xhr) {
                hideProgress();
                const response = xhr.responseJSON;
                const message = response?.message || 'Import failed. Please try again.';
                showError(message);
            }
        });
    }
    
    function displayPreview(preview) {
        console.log('Preview data received:', preview);
        console.log('Detailed preview:', preview.detailed_preview);
        
        // Extract detailed preview data safely
        const detailed = preview.detailed_preview || {};
        
        let html = '';
        
        if (preview.validation_errors.length > 0) {
            html += `
                <div class="alert alert-warning">
                    <h6>Validation Issues Found:</h6>
                    <ul class="mb-0">
                        ${preview.validation_errors.map(error => `<li>${error}</li>`).join('')}
                    </ul>
                </div>
            `;
        }
        
        // Detailed Preview Section
        if (preview.detailed_preview && preview.detailed_preview.summary) {
            
            html += `
                <div class="card mt-4">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-eye me-2"></i>Travel Spans Preview
                        </h6>
                    </div>
                    <div class="card-body">
                        
                        <div id="preview-progress" class="alert alert-warning" style="display: none;">
                            <h6 class="alert-heading">
                                <i class="bi bi-arrow-clockwise me-2"></i>Processing Preview...
                            </h6>
                            <p class="mb-2">This may take a few moments for large datasets. Processing <span id="progress-text">...</span></p>
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                            </div>
                        </div>
                        
                        <h6 class="mt-4 mb-3">Travel Spans to be Created:</h6>
                        <div class="mb-3">
                            <button type="button" class="btn btn-sm btn-outline-secondary me-2" onclick="selectAllSpans()">
                                <i class="bi bi-check-all me-1"></i>Select All
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="deselectAllSpans()">
                                <i class="bi bi-x-circle me-1"></i>Deselect All
                            </button>
                            <span class="text-muted ms-3">
                                <i class="bi bi-info-circle me-1"></i>
                                Uncheck any spans you don't want to import
                            </span>
                            <div class="mt-2">
                                <span class="badge bg-info" id="selectionCount">
                                    All spans selected
                                </span>
                            </div>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-sm table-striped" id="spansTable">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 50px;">
                                            <input type="checkbox" id="selectAllCheckbox" checked>
                                        </th>
                                        <th>#</th>
                                        <th>Span Name</th>
                                        <th>Type</th>
                                        <th>Start Date</th>
                                        <th>End Date</th>
                                        <th>Location</th>
                                        <th>Nearest Place</th>
                                        <th>OSM Lookup</th>
                                        <th>Photos</th>
                                        <th>Residence During Travel</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${detailed.spans_to_create.map((span, index) => `
                                        <tr data-span-index="${index}">
                                            <td>
                                                <input type="checkbox" class="span-checkbox" data-span-index="${index}" checked>
                                            </td>
                                            <td>${index + 1}</td>
                                            <td><strong>${span.name}</strong></td>
                                            <td><span class="badge bg-primary">${span.type}</span></td>
                                            <td>${span.start_date || 'N/A'}</td>
                                            <td>${span.end_date || 'N/A'}</td>
                                            <td>
                                                ${span.latitude && span.longitude ? 
                                                    `${span.latitude.toFixed(4)}, ${span.longitude.toFixed(4)}` : 
                                                    'N/A'
                                                }
                                            </td>
                                            <td>
                                                <div class="nearest-place-container" data-coordinates="${span.latitude}, ${span.longitude}">
                                                    <i class="bi bi-hourglass-split text-warning me-1"></i>
                                                    <span class="text-warning">Loading...</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="osm-lookup-container" data-coordinates="${span.latitude}, ${span.longitude}">
                                                    <i class="bi bi-search text-info me-1"></i>
                                                    <span class="text-info">Click to lookup</span>
                                                </div>
                                            </td>
                                            <td>${span.metadata.photo_count}</td>
                                            <td>
                                                ${span.metadata.residence_during_travel && span.metadata.residence_during_travel.length > 0 ? 
                                                    span.metadata.residence_during_travel.map(res => 
                                                        `<div class="small text-muted">
                                                            <strong>${res.name}</strong><br>
                                                            <small>${res.location || 'Unknown location'}</small>
                                                        </div>`
                                                    ).join('') : 
                                                    '<span class="text-muted">No residence data yet</span>'
                                                }
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="alert alert-info mt-3">
                            <h6 class="alert-heading">
                                <i class="bi bi-info-circle me-2"></i>Import Summary
                            </h6>
                            <p class="mb-0">
                                This will create <strong>${detailed.summary.total_spans_previewed} travel spans</strong> 
                                with <strong>${detailed.summary.total_connections_previewed} connections</strong> 
                                from your photo timeline data.
                            </p>
                        </div>
                    </div>
                </div>
            `;
        }
        
        $('#previewContent').html(html);
        $('#previewResults').show();
        
        // Initialize checkbox functionality
        initializeCheckboxes();
    }
    
    function displayImportResults(results) {
        let html = `
            <div class="alert alert-success">
                <h6>Import Completed Successfully!</h6>
                <p class="mb-0">Created ${results.travel_spans_created} travel spans from ${results.total_periods} timeline periods.</p>
            </div>
        `;
        
        if (results.errors.length > 0) {
            html += `
                <div class="alert alert-warning">
                    <h6>Some errors occurred:</h6>
                    <ul class="mb-0">
                        ${results.errors.map(error => `<li>${error}</li>`).join('')}
                    </ul>
                </div>
            `;
        }
        
        if (results.warnings.length > 0) {
            html += `
                <div class="alert alert-info">
                    <h6>Warnings:</h6>
                    <ul class="mb-0">
                        ${results.warnings.map(warning => `<li>${warning}</li>`).join('')}
                    </ul>
                </div>
            `;
        }
        
        $('#importContent').html(html);
        $('#importResults').show();
    }
    
    function showProgress(message) {
        $('#progressText').text(message);
        $('#progressSection').show();
        $('.progress-bar').css('width', '0%');
        
        // Animate progress bar
        let width = 0;
        const interval = setInterval(() => {
            if (width >= 90) {
                clearInterval(interval);
            } else {
                width += 10;
                $('.progress-bar').css('width', width + '%');
            }
        }, 200);
    }
    
    function hideProgress() {
        $('.progress-bar').css('width', '100%');
        setTimeout(() => {
            $('#progressSection').hide();
        }, 500);
    }
    
    function showError(message) {
        alert('Error: ' + message);
    }
    
    // Checkbox handling functions
    function selectAllSpans() {
        $('.span-checkbox').prop('checked', true);
        $('#selectAllCheckbox').prop('checked', true);
        updateSelectedCount();
    }
    
    function deselectAllSpans() {
        $('.span-checkbox').prop('checked', false);
        $('#selectAllCheckbox').prop('checked', false);
        updateSelectedCount();
    }
    
    function updateSelectedCount() {
        const totalSpans = $('.span-checkbox').length;
        const selectedSpans = $('.span-checkbox:checked').length;
        
        // Update the import button text to show count
        const importBtn = $('#importBtn');
        if (selectedSpans === totalSpans) {
            importBtn.text(`Import ${selectedSpans} Travel Spans`);
        } else {
            importBtn.text(`Import ${selectedSpans} of ${totalSpans} Travel Spans`);
        }
        
        // Update the info text
        const infoText = $('.alert-info ul li:first');
        if (infoText.length > 0) {
            infoText.html(`<strong>${selectedSpans} new travel spans</strong> as event-type spans`);
        }
        
        // Update the selection count badge
        const selectionBadge = $('#selectionCount');
        if (selectedSpans === totalSpans) {
            selectionBadge.text('All spans selected').removeClass('bg-warning').addClass('bg-info');
        } else if (selectedSpans === 0) {
            selectionBadge.text('No spans selected').removeClass('bg-info bg-warning').addClass('bg-danger');
        } else {
            selectionBadge.text(`${selectedSpans} of ${totalSpans} spans selected`).removeClass('bg-info bg-danger').addClass('bg-warning');
        }
    }
    
    // Handle select all checkbox
    $(document).on('change', '#selectAllCheckbox', function() {
        const isChecked = $(this).prop('checked');
        $('.span-checkbox').prop('checked', isChecked);
        updateSelectedCount();
    });
    
    // Handle individual span checkboxes
    $(document).on('change', '.span-checkbox', function() {
        const totalSpans = $('.span-checkbox').length;
        const selectedSpans = $('.span-checkbox:checked').length;
        
        // Update select all checkbox
        if (selectedSpans === 0) {
            $('#selectAllCheckbox').prop('indeterminate', false).prop('checked', false);
        } else if (selectedSpans === totalSpans) {
            $('#selectAllCheckbox').prop('indeterminate', false).prop('checked', true);
        } else {
            $('#selectAllCheckbox').prop('indeterminate', true);
        }
        
        updateSelectedCount();
    });
    
    // Initialize checkbox state when preview is displayed
    function initializeCheckboxes() {
        updateSelectedCount();
        
        // Load nearest places for the preview table
        loadNearestPlaces();
    }
    
    // Function to load nearest place spans via AJAX
    function loadNearestPlace(container) {
        const coordinates = container.data('coordinates');
        if (!coordinates || coordinates === 'N/A') {
            container.html('<span class="text-muted small">No coordinates</span>');
            return;
        }
        
        const icon = container.find('i');
        const text = container.find('span');
        
        // Show loading state
        icon.removeClass('bi-hourglass-split text-warning').addClass('bi-arrow-clockwise text-warning');
        text.removeClass('text-warning').addClass('text-warning').text('Loading...');
        
        $.ajax({
            url: '{{ route("admin.images.get-nearest-place") }}',
            method: 'POST',
            data: {
                coordinates: coordinates,
                _token: '{{ csrf_token() }}'
            },
            success: function(response) {
                if (response.success && response.place) {
                    icon.removeClass('bi-arrow-clockwise text-warning').addClass('bi-geo-alt text-success');
                    text.removeClass('text-warning').addClass('text-success');
                    const distanceText = response.place.distance_km ? ` (${response.place.distance_km}km)` : '';
                    text.html('<a href="' + response.place.url + '" class="text-decoration-none">' + response.place.name + distanceText + '</a>');
                } else {
                    icon.removeClass('bi-arrow-clockwise text-warning').addClass('bi-exclamation-triangle text-danger');
                    text.removeClass('text-warning').addClass('text-danger').text('No nearby places');
                }
            },
            error: function(xhr) {
                icon.removeClass('bi-arrow-clockwise text-warning').addClass('bi-exclamation-triangle text-danger');
                text.removeClass('text-warning').addClass('text-danger');
                
                if (xhr.status === 429 || (xhr.responseText && xhr.responseText.includes('rate limit'))) {
                    text.text('Rate limited - try later');
                } else {
                    text.text('Error loading');
                }
            }
        });
    }
    
    // Load nearest places for visible containers
    function loadNearestPlaces() {
        let delay = 0;
        const delayIncrement = 1000; // 1 second between requests
        
        $('.nearest-place-container').each(function() {
            const container = $(this);
            const text = container.find('span');
            
            // Only load if not already loaded and is visible
            if (text.hasClass('text-warning') && container.is(':visible')) {
                setTimeout(() => loadNearestPlace(container), delay);
                delay += delayIncrement;
            }
        });
    }
    
    // Optional: Add a manual refresh button for nearest places
    $(document).on('click', '.nearest-place-container', function() {
        const container = $(this);
        const text = container.find('span');
        
        // Only reload if it's in an error state or already loaded
        if (text.hasClass('text-danger') || text.hasClass('text-success')) {
            loadNearestPlace(container);
        }
    });
    
    // OSM Lookup functionality
    $(document).on('click', '.osm-lookup-container', function() {
        const container = $(this);
        const coordinates = container.data('coordinates');
        
        if (!coordinates || coordinates === 'N/A') {
            container.html('<span class="text-muted small">No coordinates</span>');
            return;
        }
        
        loadOSMLookup(container, coordinates);
    });
    
    function loadOSMLookup(container, coordinates) {
        const icon = container.find('i');
        const text = container.find('span');
        
        // Show loading state
        icon.removeClass('bi-search text-info').addClass('bi-arrow-clockwise text-warning');
        text.removeClass('text-info').addClass('text-warning').text('Looking up...');
        
        $.ajax({
            url: '{{ route("settings.import.photo-timeline.osm-lookup") }}',
            method: 'POST',
            data: {
                coordinates: coordinates,
                _token: '{{ csrf_token() }}'
            },
            success: function(response) {
                if (response.success && response.place) {
                    icon.removeClass('bi-arrow-clockwise text-warning').addClass('bi-geo-alt text-success');
                    text.removeClass('text-warning').addClass('text-success');
                    
                    if (response.place.existing_place) {
                        // Existing place found
                        text.html(`<a href="${response.place.url}" class="text-decoration-none">${response.place.name}</a> <small class="text-muted">(existing, ${response.place.distance_km}km)</small>`);
                    } else {
                        // New place will be created
                        const adminLevel = response.place.admin_level || 'unknown';
                        const placeType = response.place.place_type || 'unknown';
                        text.html(`<span class="text-success">${response.place.name}</span> <small class="text-muted">(new place, level ${adminLevel}, ${placeType})</small>`);
                    }
                    
                    // Store the place data for import
                    container.data('place-data', response.place);
                } else {
                    icon.removeClass('bi-arrow-clockwise text-warning').addClass('bi-exclamation-triangle text-danger');
                    text.removeClass('text-warning').addClass('text-danger').text(response.message || 'No place found');
                }
            },
            error: function(xhr) {
                icon.removeClass('bi-arrow-clockwise text-warning').addClass('bi-exclamation-triangle text-danger');
                text.removeClass('text-warning').addClass('text-danger');
                
                if (xhr.status === 429) {
                    text.text('Rate limited - try later');
                } else {
                    text.text('Error loading');
                }
            }
        });
    }
});
</script>
@endpush
