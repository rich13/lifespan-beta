version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lifespan-app-prod
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./storage:/var/www/storage
      - ./public:/var/www/public
    networks:
      - lifespan-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - SESSION_DRIVER=redis
      - SESSION_LIFETIME=525600
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - DOCKER_CONTAINER=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    container_name: lifespan-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./docker/nginx/prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - lifespan-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      app:
        condition: service_healthy

  db:
    image: postgres:15-alpine
    container_name: lifespan-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./docker/postgres/init-postgis.sh:/docker-entrypoint-initdb.d/init-postgis.sh
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - lifespan-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  redis:
    image: redis:7-alpine
    container_name: lifespan-redis-prod
    restart: unless-stopped
    networks:
      - lifespan-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lifespan-queue-prod
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./storage:/var/www/storage
    networks:
      - lifespan-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
    environment:
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["php", "artisan", "queue:work", "--sleep=3", "--tries=3", "--max-time=3600"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lifespan-scheduler-prod
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./storage:/var/www/storage
    networks:
      - lifespan-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    environment:
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    command: ["php", "artisan", "schedule:work"]
    depends_on:
      db:
        condition: service_healthy

  monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lifespan-monitor-prod
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./scripts:/var/www/scripts
      - /var/log:/var/log
    networks:
      - lifespan-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    environment:
      - ALERT_EMAIL=${ALERT_EMAIL}
    command: ["/bin/bash", "-c", "while true; do ./scripts/production-monitor.sh; sleep 300; done"]

networks:
  lifespan-network:
    driver: bridge

volumes:
  dbdata:
    driver: local 