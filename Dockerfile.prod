# Build stage for Node.js
FROM node:20-alpine AS node-builder

WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY resources/ resources/
COPY vite.config.js ./
RUN npm run build

# PHP stage
FROM php:8.2-fpm

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    supervisor \
    nginx \
    postgresql-client \
    libpq-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    libzip-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install pdo_pgsql mbstring exif pcntl bcmath gd zip opcache

# Configure PHP
COPY docker/prod/php.ini /usr/local/etc/php/conf.d/app.ini
COPY docker/prod/opcache.ini /usr/local/etc/php/conf.d/opcache.ini
COPY docker/prod/php-fpm.conf /usr/local/etc/php-fpm.d/www.conf

# Install composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www

# Create necessary directories and set initial permissions
RUN mkdir -p /var/log/nginx /var/log/supervisor /var/lib/nginx/body /run/nginx /run/php && \
    touch /var/log/nginx/error.log /var/log/nginx/access.log /var/log/supervisor/supervisord.log /var/log/php-fpm.log /var/log/php-fpm-access.log && \
    chmod -R 777 /var/log /var/lib/nginx /run/nginx /run/php

# Copy application files
COPY . .

# Set up environment first
RUN cp .env.example .env && \
    sed -i 's/APP_ENV=local/APP_ENV=production/' .env && \
    sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env

# Set up storage and cache directories with correct permissions
RUN mkdir -p /var/www/storage/logs /var/www/bootstrap/cache && \
    chmod -R 777 /var/www/storage /var/www/bootstrap/cache && \
    chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache

# Install composer dependencies and optimize
RUN composer install --no-dev --optimize-autoloader --no-scripts && \
    composer dump-autoload --optimize

# Generate key and cache configurations
RUN php artisan key:generate --force && \
    php artisan storage:link && \
    php artisan config:cache && \
    php artisan route:cache && \
    php artisan view:cache

# Copy built frontend assets
COPY --from=node-builder /app/public/build public/build/

# Copy configuration files
COPY docker/prod/nginx.conf /etc/nginx/nginx.conf
COPY docker/prod/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create entrypoint script
RUN echo '#!/bin/sh\n\
echo "Waiting for database to be ready..."\n\
while ! pg_isready -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USERNAME} -d ${DB_DATABASE} > /dev/null 2>&1; do\n\
    echo "Database is unavailable - sleeping"\n\
    sleep 1\n\
done\n\
echo "Database is ready!"\n\
\n\
echo "Updating .env file with environment variables..."\n\
sed -i "s#DB_HOST=.*#DB_HOST=${DB_HOST}#" .env\n\
sed -i "s#DB_PORT=.*#DB_PORT=${DB_PORT}#" .env\n\
sed -i "s#DB_DATABASE=.*#DB_DATABASE=${DB_DATABASE}#" .env\n\
sed -i "s#DB_USERNAME=.*#DB_USERNAME=${DB_USERNAME}#" .env\n\
sed -i "s#DB_PASSWORD=.*#DB_PASSWORD=${DB_PASSWORD}#" .env\n\
\n\
echo "Clearing configuration cache..."\n\
php artisan config:clear\n\
\n\
echo "Running migrations..."\n\
php artisan migrate --force\n\
\n\
echo "Setting storage permissions..."\n\
chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache\n\
chmod -R 775 /var/www/storage /var/www/bootstrap/cache\n\
\n\
echo "Starting supervisor..."\n\
/usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf\n\
' > /usr/local/bin/docker-entrypoint.sh && \
    chmod +x /usr/local/bin/docker-entrypoint.sh

EXPOSE 80

ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]