FROM php:8.2-fpm

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    libpq-dev \
    libzip-dev \
    postgresql-client \
    nginx

# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

# Install PHP extensions
RUN docker-php-ext-install pdo_pgsql mbstring exif pcntl bcmath gd zip

# Configure PHP
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini" && \
    sed -i 's/memory_limit = 128M/memory_limit = 256M/g' "$PHP_INI_DIR/php.ini" && \
    sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 64M/g' "$PHP_INI_DIR/php.ini" && \
    sed -i 's/post_max_size = 8M/post_max_size = 64M/g' "$PHP_INI_DIR/php.ini"

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www

# Copy the entire application
COPY . .

# Install dependencies (including dev dependencies for build)
RUN composer install --no-interaction --optimize-autoloader --no-dev && \
    npm install && \
    npm run build && \
    rm -rf node_modules

# Set up storage structure
RUN mkdir -p storage/framework/{sessions,views,cache} && \
    mkdir -p storage/logs && \
    chmod -R 775 storage && \
    chmod -R 775 bootstrap/cache && \
    chown -R www-data:www-data /var/www && \
    mkdir -p /run/php && \
    chown -R www-data:www-data /run/php

# Generate application key if not exists
RUN if [ ! -f .env ]; then cp .env.example .env; fi && \
    php artisan key:generate

# Optimize Laravel
RUN php artisan config:cache && \
    php artisan route:cache && \
    php artisan view:cache

# Configure PHP-FPM
RUN echo '[www]\n\
listen = 127.0.0.1:9000\n\
listen.owner = www-data\n\
listen.group = www-data\n\
pm = dynamic\n\
pm.max_children = 10\n\
pm.start_servers = 2\n\
pm.min_spare_servers = 1\n\
pm.max_spare_servers = 3\n\
pm.max_requests = 500\n\
php_admin_value[error_log] = /var/log/php-fpm.log\n\
php_admin_flag[log_errors] = on' > /usr/local/etc/php-fpm.d/www.conf

# Configure Nginx
RUN echo 'server { \
    listen 10000; \
    server_name _; \
    root /var/www/public; \
    index index.php; \
    charset utf-8; \
    client_max_body_size 64M; \
    error_log /var/log/nginx/error.log; \
    access_log /var/log/nginx/access.log; \
    location / { \
        try_files $uri $uri/ /index.php?$query_string; \
    } \
    location = /favicon.ico { access_log off; log_not_found off; } \
    location = /robots.txt  { access_log off; log_not_found off; } \
    error_page 404 /index.php; \
    location ~ \.php$ { \
        try_files $uri =404; \
        fastcgi_split_path_info ^(.+\.php)(/.+)$; \
        fastcgi_pass 127.0.0.1:9000; \
        fastcgi_index index.php; \
        include fastcgi_params; \
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; \
        fastcgi_param PATH_INFO $fastcgi_path_info; \
        fastcgi_read_timeout 300; \
    } \
    location ~ /\.(?!well-known).* { \
        deny all; \
    } \
}' > /etc/nginx/conf.d/default.conf && \
rm -f /etc/nginx/sites-enabled/default

# Create log directories
RUN mkdir -p /var/log/nginx && \
    touch /var/log/php-fpm.log && \
    chown -R www-data:www-data /var/log/php-fpm.log && \
    chown -R www-data:www-data /var/www && \
    chmod -R 755 /var/www/public

# Create start script
RUN echo '#!/bin/bash\n\
php-fpm --nodaemonize --fpm-config /usr/local/etc/php-fpm.d/www.conf -d variables_order=EGPCS &\n\
nginx -g "daemon off;"' > /usr/local/bin/start.sh && \
chmod +x /usr/local/bin/start.sh

# Expose port 10000 for Render
EXPOSE 10000

# Start the application
CMD ["/usr/local/bin/start.sh"] 